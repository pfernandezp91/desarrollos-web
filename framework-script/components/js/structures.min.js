/*! ** coddy.com.mx - Base v1.1.0 */
//  ** Última modificación: '10-07-2023';

// Usamos el modo estricto de javascript para evitar errores en el código javascript de la página web (use strict)
'use strict';

// Custom Bootstrap version for FrameworkScript
let bootstrapVersion = '5.3.0';
let bootstrapRoot = '../lib/bootstrap/' + bootstrapVersion + '/css/bootstrap.min.css';

// Componente b-header
class BHeader extends HTMLElement {
  constructor() {
    super();

    // Crear el shadow root
    const shadow = this.attachShadow({ mode: 'open' });
    const siteTitle = this.getAttribute('site-title') || 'FrameworkScript';
    const bgColor = this.getAttribute('bg-color') || '#E0E0E0';
    const textColor = this.getAttribute('text-color') || '#000000';
    const titleShow = this.getAttribute('title-show') === 'none' ? false : true;
    const logoType = this.getAttribute('site-logo') || '';
    let logo = '';

    // Cargar el logo específico según el atributo site-logo
    switch (logoType) {
      case 'logo-1':
        logo = 'logo1.png';
        break;
      case 'logo-2':
        logo = 'logo2.png';
        break;
      case 'logo-3':
        logo = 'logo3.png';
        break;
      default:
        logo = 'logo.png';
        break;
    }

    let containerSize = this.getAttribute('container-size') || 'fluid';

    switch (containerSize) {
      case 'fluid':
        // Aplica el tamaño de contenedor "container-fluid" al header
        containerSize = 'container-fluid';
        break;
      case 'sm':
        // Aplica el tamaño de contenedor "container-sm" al header
        containerSize = 'container-sm';
        break;
      case 'md':
        // Aplica el tamaño de contenedor "container-md" al header
        containerSize = 'container-md';
        break;
      case 'lg':
        // Aplica el tamaño de contenedor "container-lg" al header
        containerSize = 'container-lg';
        break;
      default:
        // Por defecto, aplica el tamaño de contenedor "container" al header
        containerSize = 'container';
        break;
    }

    // Función para obtener las dimensiones de la imagen
    const getImageDimensions = (src, callback) => {
      const img = new Image();
      img.onload = () => {
        const width = img.width;
        const height = img.height;
        callback(width, height);
      };
      img.src = src;
    };

    // Función para determinar si la imagen es horizontal, vertical o cuadrada
    const getImageOrientation = (width, height) => {
      if (width > height) {
        return 'horizontal';
      } else if (height > width) {
        return 'vertical';
      } else {
        return 'square';
      }
    };

    // Obtener dimensiones y orientación de la imagen
    getImageDimensions(`../../assets/img/logos/${logo}`, (width, height) => {
      const imageOrientation = getImageOrientation(width, height);

      // Crear el template y clonarlo en el shadow root
      const template = document.createElement('template');
      template.innerHTML = `
        <link rel="stylesheet" href="${bootstrapRoot}">
        <link rel="stylesheet" href="../components/css/sections/header.css">
        <header class="navbar-light header-sticky">
          <nav class="navbar" style="color: ${textColor}; background-color: ${bgColor}">
            <div class="${containerSize} flex-nowrap">
              <a class="navbar-brand navbar-brand-${imageOrientation}" href="./">
                <img class="dark-mode-item navbar-brand-item" src="../../assets/img/logos/${logo}" alt="${siteTitle}" />
                ${titleShow ? '<span class="ms-2">' + siteTitle + '</span>' : ''}
              </a>
              <slot name="menu"></slot>
            </div>
          </nav>
        </header>
      `;

      shadow.appendChild(template.content.cloneNode(true));
    });
  }
}
// Definir el componente b-header
customElements.define('b-header', BHeader);

// Componente b-menu
class BMenu extends HTMLElement {
  constructor() {
    super();

    // Crear el shadow root
    const shadow = this.attachShadow({ mode: 'open' });

    // Obtener los datos del atributo "data" (en formato JSON)
    const data = JSON.parse(this.getAttribute('data'));

    // Función recursiva para generar el HTML del menú
    const generateMenuHTML = (items) => {
      let menuHTML = '<ul class="navbar-nav me-auto mb-2 mb-lg-0">';

      items.forEach(item => {
        menuHTML += '<li class="nav-item px-3">';

        // Agregar enlace si tiene "href" definido
        if (item.href) {
          menuHTML += `<a class="nav-link" href="${item.href}">${item.text}</a>`;
        } else {
          menuHTML += `<span class="nav-link">${item.text}</span>`;
        }

        // Agregar submenús si hay hijos
        if (item.children && item.children.length > 0) {
          menuHTML += '<ul class="dropdown-menu">';
          menuHTML += generateMenuHTML(item.children);
          menuHTML += '</ul>';
        }

        menuHTML += '</li>';
      });

      menuHTML += '</ul>';

      return menuHTML;
    };

    // Generar el HTML del menú utilizando los datos proporcionados
    const menuHTML = generateMenuHTML(data);

    // Crear el template y clonarlo en el shadow root
    const template = document.createElement('template');
    template.innerHTML = `
      <link rel="stylesheet" href="${bootstrapRoot}">
      <link rel="stylesheet" href="../components/css/sections/menu.css">
      ${menuHTML}
    `;

    shadow.appendChild(template.content.cloneNode(true));

    document.querySelector('b-menu').setAttribute('data', '');
  }
}
// Definir el componente b-menu
customElements.define('b-menu', BMenu);

// Componente b-content
class BContent extends HTMLElement {
    constructor() {
      super();
  
      // Crear el shadow root
      const shadow = this.attachShadow({ mode: 'open' });

      let containerSize = this.getAttribute('container-size') || 'fluid';

      switch (containerSize) {
        case 'fluid':
          // Aplica el tamaño de contenedor "container-fluid" al header
          containerSize = 'container-fluid';
          break;
        case 'sm':
          // Aplica el tamaño de contenedor "container-sm" al header
          containerSize = 'container-sm';
          break;
        case 'md':
          // Aplica el tamaño de contenedor "container-md" al header
          containerSize = 'container-md';
          break;
        case 'lg':
          // Aplica el tamaño de contenedor "container-lg" al header
          containerSize = 'container-lg';
          break;
        default:
          // Por defecto, aplica el tamaño de contenedor "container" al header
          containerSize = 'container';
          break;
      }
  
      // Crear el template y clonarlo en el shadow root
      const template = document.createElement('template');
      template.innerHTML = `
        <link rel="stylesheet" href="${bootstrapRoot}">
        <link rel="stylesheet" href="../components/css/sections/content.css">
        <div class="bd-content ps-lg-4 px-lg-4 py-4 py-lg-5">
          <div class="${containerSize}">
            <slot name="superior"></slot>  
            <slot name="content"></slot>
            <slot name="inferior"></slot>
          </div>
        </div>
      `;
      shadow.appendChild(template.content.cloneNode(true));
    }
}
// Definir el componente b-content
customElements.define('b-content', BContent);

// Componente b-footer
class BFooter extends HTMLElement {
    constructor() {
      super();
  
      // Crear el shadow root
      const shadow = this.attachShadow({ mode: 'open' });
      const siteTitle = this.getAttribute('site-title') || 'FrameworkScript';
      const bgColor = this.getAttribute('bg-color') || '#E0E0E0';
      const textColor = this.getAttribute('text-color') || '#000000';
      const titleShow = this.getAttribute('title-show') === 'none' ? false : true;
      const logoType = this.getAttribute('site-logo') || '';
      let logo = '';

      // Cargar el logo específico según el atributo site-logo
      switch (logoType) {
        case 'logo-1':
          logo = 'logo1.png';
          break;
        case 'logo-2':
          logo = 'logo2.png';
          break;
        case 'logo-3':
          logo = 'logo3.png';
          break;
        default:
          logo = 'logo.png';
          break;
      }

      let containerSize = this.getAttribute('container-size') || 'fluid';

      switch (containerSize) {
        case 'fluid':
          // Aplica el tamaño de contenedor "container-fluid" al header
          containerSize = 'container-fluid';
          break;
        case 'sm':
          // Aplica el tamaño de contenedor "container-sm" al header
          containerSize = 'container-sm';
          break;
        case 'md':
          // Aplica el tamaño de contenedor "container-md" al header
          containerSize = 'container-md';
          break;
        case 'lg':
          // Aplica el tamaño de contenedor "container-lg" al header
          containerSize = 'container-lg';
          break;
        default:
          // Por defecto, aplica el tamaño de contenedor "container" al header
          containerSize = 'container';
          break;
      }

      // Función para obtener las dimensiones de la imagen
      const getImageDimensions = (src, callback) => {
        const img = new Image();
        img.onload = () => {
          const width = img.width;
          const height = img.height;
          callback(width, height);
        };
        img.src = src;
      };

      // Función para determinar si la imagen es horizontal, vertical o cuadrada
      const getImageOrientation = (width, height) => {
        if (width > height) {
          return 'horizontal';
        } else if (height > width) {
          return 'vertical';
        } else {
          return 'square';
        }
      };

      // Obtener dimensiones y orientación de la imagen
      getImageDimensions(`../../assets/img/logos/${logo}`, (width, height) => {
        const imageOrientation = getImageOrientation(width, height);

        // Crear el template y clonarlo en el shadow root
        const template = document.createElement('template');
        template.innerHTML = `
          <link rel="stylesheet" href="${bootstrapRoot}">
          <link rel="stylesheet" href="../components/css/sections/footer.css">
          <footer class="bd-footer py-4 py-md-5 mt-5 bg-body-tertiary">
            <div class="${containerSize}">
              <a class="d-inline-flex align-items-center mb-2 text-body-emphasis text-decoration-none" href="/" aria-label="Bootstrap">
                <span class="fs-5">${this.getAttribute('site-title')}</span>
              </a>
              <slot name="footer"></slot>
            </div>
          </footer>
        `;

        shadow.appendChild(template.content.cloneNode(true));
      });
    }
}
// Definir el componente b-footer
customElements.define('b-footer', BFooter);